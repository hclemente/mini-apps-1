import TextInput from './textinput.js';

class Form1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      pass: '',
      formNum: 'form1'
    };
    this.handleInput = this.handleInput.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInput(event) {
    const target = event.target;
    const value = target.value;
    const property = target.name;
    let newState = Object.assign({}, this.state);
    newState[property] = value;
    console.log(newState);
    this.setState(newState);
  }

  handleSubmit(event) {
    event.preventDefault();
    this.props.handleNext(this.state);
  }

  render() {
    let label = ['Name: ', 'Email: ', 'Password: '];
    let properties = ['name', 'email', 'pass'];
    let types = ['text', 'text', 'password'];
    let state = this.state;
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("h1", null, "Form 1"), label.map((input, index) => /*#__PURE__*/React.createElement(TextInput, {
      name: properties[index],
      value: this.state[properties[index]],
      inputType: types[index],
      label: label[index],
      change: this.handleInput,
      key: index
    })), /*#__PURE__*/React.createElement("button", null, "Next"));
  }

}

export default Form1;
{
  /* <TextInput name={properties[0]}
  value={this.state[properties[0]]}
  inputType={types[0]}
  label={inputs[0]}
  change={this.handleInput}
  />
  <br/>
  <TextInput name={properties[1]}
  value={this.state[properties[1]]}
  inputType={types[1]}
  label={inputs[1]}
  change={this.handleInput}
  />
  <br/>
  <TextInput name={properties[2]}
  value={this.state[properties[2]]}
  inputType={types[2]}
  label={inputs[2]}
  change={this.handleInput}
  /> */
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9mb3JtMS5qc3giXSwibmFtZXMiOlsiVGV4dElucHV0IiwiRm9ybTEiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsIm5hbWUiLCJlbWFpbCIsInBhc3MiLCJmb3JtTnVtIiwiaGFuZGxlSW5wdXQiLCJiaW5kIiwiaGFuZGxlU3VibWl0IiwiZXZlbnQiLCJ0YXJnZXQiLCJ2YWx1ZSIsInByb3BlcnR5IiwibmV3U3RhdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJjb25zb2xlIiwibG9nIiwic2V0U3RhdGUiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZU5leHQiLCJyZW5kZXIiLCJsYWJlbCIsInByb3BlcnRpZXMiLCJ0eXBlcyIsIm1hcCIsImlucHV0IiwiaW5kZXgiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFNBQVAsTUFBc0IsZ0JBQXRCOztBQUVBLE1BQU1DLEtBQU4sU0FBb0JDLEtBQUssQ0FBQ0MsU0FBMUIsQ0FBb0M7QUFDbENDLEVBQUFBLFdBQVcsQ0FBRUMsS0FBRixFQUFTO0FBQ2xCLFVBQU9BLEtBQVA7QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEVBREs7QUFFWEMsTUFBQUEsS0FBSyxFQUFFLEVBRkk7QUFHWEMsTUFBQUEsSUFBSSxFQUFFLEVBSEs7QUFJWEMsTUFBQUEsT0FBTyxFQUFFO0FBSkUsS0FBYjtBQU1BLFNBQUtDLFdBQUwsR0FBbUIsS0FBS0EsV0FBTCxDQUFpQkMsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBbkI7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEtBQUtBLFlBQUwsQ0FBa0JELElBQWxCLENBQXVCLElBQXZCLENBQXBCO0FBQ0Q7O0FBRURELEVBQUFBLFdBQVcsQ0FBRUcsS0FBRixFQUFTO0FBQ2xCLFVBQU1DLE1BQU0sR0FBR0QsS0FBSyxDQUFDQyxNQUFyQjtBQUNBLFVBQU1DLEtBQUssR0FBR0QsTUFBTSxDQUFDQyxLQUFyQjtBQUNBLFVBQU1DLFFBQVEsR0FBR0YsTUFBTSxDQUFDUixJQUF4QjtBQUNBLFFBQUlXLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLZCxLQUF2QixDQUFmO0FBQ0FZLElBQUFBLFFBQVEsQ0FBQ0QsUUFBRCxDQUFSLEdBQXFCRCxLQUFyQjtBQUNBSyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosUUFBWjtBQUNBLFNBQUtLLFFBQUwsQ0FBY0wsUUFBZDtBQUNEOztBQUVETCxFQUFBQSxZQUFZLENBQUVDLEtBQUYsRUFBUztBQUNuQkEsSUFBQUEsS0FBSyxDQUFDVSxjQUFOO0FBQ0EsU0FBS25CLEtBQUwsQ0FBV29CLFVBQVgsQ0FBc0IsS0FBS25CLEtBQTNCO0FBQ0Q7O0FBRURvQixFQUFBQSxNQUFNLEdBQUk7QUFDUixRQUFJQyxLQUFLLEdBQUcsQ0FBQyxRQUFELEVBQVcsU0FBWCxFQUFzQixZQUF0QixDQUFaO0FBQ0EsUUFBSUMsVUFBVSxHQUFHLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsTUFBbEIsQ0FBakI7QUFDQSxRQUFJQyxLQUFLLEdBQUcsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixVQUFqQixDQUFaO0FBQ0EsUUFBSXZCLEtBQUssR0FBRyxLQUFLQSxLQUFqQjtBQUNBLHdCQUVRO0FBQU0sTUFBQSxRQUFRLEVBQUUsS0FBS087QUFBckIsb0JBQ0EseUNBREEsRUFFR2MsS0FBSyxDQUFDRyxHQUFOLENBQVUsQ0FBQ0MsS0FBRCxFQUFRQyxLQUFSLGtCQUNYLG9CQUFDLFNBQUQ7QUFBVyxNQUFBLElBQUksRUFBRUosVUFBVSxDQUFDSSxLQUFELENBQTNCO0FBQ0EsTUFBQSxLQUFLLEVBQUUsS0FBSzFCLEtBQUwsQ0FBV3NCLFVBQVUsQ0FBQ0ksS0FBRCxDQUFyQixDQURQO0FBRUEsTUFBQSxTQUFTLEVBQUVILEtBQUssQ0FBQ0csS0FBRCxDQUZoQjtBQUdBLE1BQUEsS0FBSyxFQUFFTCxLQUFLLENBQUNLLEtBQUQsQ0FIWjtBQUlBLE1BQUEsTUFBTSxFQUFFLEtBQUtyQixXQUpiO0FBS0EsTUFBQSxHQUFHLEVBQUVxQjtBQUxMLE1BREMsQ0FGSCxlQVdFLDJDQVhGLENBRlI7QUFnQkQ7O0FBakRpQzs7QUFvRHBDLGVBQWUvQixLQUFmO0FBRUE7QUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGV4dElucHV0IGZyb20gJy4vdGV4dGlucHV0LmpzJztcblxuY2xhc3MgRm9ybTEgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICBzdXBlciAocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIHBhc3M6ICcnLFxuICAgICAgZm9ybU51bTogJ2Zvcm0xJ1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZUlucHV0ID0gdGhpcy5oYW5kbGVJbnB1dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUlucHV0IChldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCB2YWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHRhcmdldC5uYW1lO1xuICAgIGxldCBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUpO1xuICAgIG5ld1N0YXRlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGNvbnNvbGUubG9nKG5ld1N0YXRlKTtcbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdCAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMucHJvcHMuaGFuZGxlTmV4dCh0aGlzLnN0YXRlKTtcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgbGV0IGxhYmVsID0gWydOYW1lOiAnLCAnRW1haWw6ICcsICdQYXNzd29yZDogJ107XG4gICAgbGV0IHByb3BlcnRpZXMgPSBbJ25hbWUnLCAnZW1haWwnLCAncGFzcyddO1xuICAgIGxldCB0eXBlcyA9IFsndGV4dCcsICd0ZXh0JywgJ3Bhc3N3b3JkJ107XG4gICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuXG4gICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgPGgxPkZvcm0gMTwvaDE+XG4gICAgICAgICAgICAgIHtsYWJlbC5tYXAoKGlucHV0LCBpbmRleCkgPT5cbiAgICAgICAgICAgICAgPFRleHRJbnB1dCBuYW1lPXtwcm9wZXJ0aWVzW2luZGV4XX1cbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGVbcHJvcGVydGllc1tpbmRleF1dfVxuICAgICAgICAgICAgICBpbnB1dFR5cGU9e3R5cGVzW2luZGV4XX1cbiAgICAgICAgICAgICAgbGFiZWw9e2xhYmVsW2luZGV4XX1cbiAgICAgICAgICAgICAgY2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0fVxuICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8YnV0dG9uPk5leHQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybTE7XG5cbnsvKiA8VGV4dElucHV0IG5hbWU9e3Byb3BlcnRpZXNbMF19XG52YWx1ZT17dGhpcy5zdGF0ZVtwcm9wZXJ0aWVzWzBdXX1cbmlucHV0VHlwZT17dHlwZXNbMF19XG5sYWJlbD17aW5wdXRzWzBdfVxuY2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0fVxuLz5cbjxici8+XG48VGV4dElucHV0IG5hbWU9e3Byb3BlcnRpZXNbMV19XG52YWx1ZT17dGhpcy5zdGF0ZVtwcm9wZXJ0aWVzWzFdXX1cbmlucHV0VHlwZT17dHlwZXNbMV19XG5sYWJlbD17aW5wdXRzWzFdfVxuY2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0fVxuLz5cbjxici8+XG48VGV4dElucHV0IG5hbWU9e3Byb3BlcnRpZXNbMl19XG52YWx1ZT17dGhpcy5zdGF0ZVtwcm9wZXJ0aWVzWzJdXX1cbmlucHV0VHlwZT17dHlwZXNbMl19XG5sYWJlbD17aW5wdXRzWzJdfVxuY2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0fVxuLz4gKi99Il19