import TextInput from './textinput.js';

class Form1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: '',
      email: '',
      pass: '',
      formNum: 'form1'
    };
    this.handleInput = this.handleInput.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleInput(event) {
    const target = event.target;
    const value = target.value;
    const property = target.name;
    let newState = Object.assign({}, this.state);
    newState[property] = value;
    this.setState(newState);
  }

  handleSubmit(event) {
    event.preventDefault();
    this.props.handleNext(this.state);
  }

  render() {
    let label = ['Name: ', 'Email: ', 'Password: '];
    let properties = ['name', 'email', 'pass'];
    let types = ['text', 'text', 'password'];
    let state = this.state;
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/React.createElement("h1", null, "Form 1"), label.map((input, index) => /*#__PURE__*/React.createElement(TextInput, {
      name: properties[index],
      value: this.state[properties[index]],
      inputType: types[index],
      label: label[index],
      change: this.handleInput,
      key: index
    })), /*#__PURE__*/React.createElement("button", null, "Next"));
  }

}

export default Form1;
{
  /* <TextInput name={properties[0]}
  value={this.state[properties[0]]}
  inputType={types[0]}
  label={inputs[0]}
  change={this.handleInput}
  />
  <br/>
  <TextInput name={properties[1]}
  value={this.state[properties[1]]}
  inputType={types[1]}
  label={inputs[1]}
  change={this.handleInput}
  />
  <br/>
  <TextInput name={properties[2]}
  value={this.state[properties[2]]}
  inputType={types[2]}
  label={inputs[2]}
  change={this.handleInput}
  /> */
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NsaWVudC9mb3JtMS5qc3giXSwibmFtZXMiOlsiVGV4dElucHV0IiwiRm9ybTEiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsIm5hbWUiLCJlbWFpbCIsInBhc3MiLCJmb3JtTnVtIiwiaGFuZGxlSW5wdXQiLCJiaW5kIiwiaGFuZGxlU3VibWl0IiwiZXZlbnQiLCJ0YXJnZXQiLCJ2YWx1ZSIsInByb3BlcnR5IiwibmV3U3RhdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJzZXRTdGF0ZSIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlTmV4dCIsInJlbmRlciIsImxhYmVsIiwicHJvcGVydGllcyIsInR5cGVzIiwibWFwIiwiaW5wdXQiLCJpbmRleCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsU0FBUCxNQUFzQixnQkFBdEI7O0FBRUEsTUFBTUMsS0FBTixTQUFvQkMsS0FBSyxDQUFDQyxTQUExQixDQUFvQztBQUNsQ0MsRUFBQUEsV0FBVyxDQUFFQyxLQUFGLEVBQVM7QUFDbEIsVUFBT0EsS0FBUDtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxJQUFJLEVBQUUsRUFESztBQUVYQyxNQUFBQSxLQUFLLEVBQUUsRUFGSTtBQUdYQyxNQUFBQSxJQUFJLEVBQUUsRUFISztBQUlYQyxNQUFBQSxPQUFPLEVBQUU7QUFKRSxLQUFiO0FBTUEsU0FBS0MsV0FBTCxHQUFtQixLQUFLQSxXQUFMLENBQWlCQyxJQUFqQixDQUFzQixJQUF0QixDQUFuQjtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsS0FBS0EsWUFBTCxDQUFrQkQsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBcEI7QUFDRDs7QUFFREQsRUFBQUEsV0FBVyxDQUFFRyxLQUFGLEVBQVM7QUFDbEIsVUFBTUMsTUFBTSxHQUFHRCxLQUFLLENBQUNDLE1BQXJCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHRCxNQUFNLENBQUNDLEtBQXJCO0FBQ0EsVUFBTUMsUUFBUSxHQUFHRixNQUFNLENBQUNSLElBQXhCO0FBQ0EsUUFBSVcsUUFBUSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUtkLEtBQXZCLENBQWY7QUFDQVksSUFBQUEsUUFBUSxDQUFDRCxRQUFELENBQVIsR0FBcUJELEtBQXJCO0FBQ0EsU0FBS0ssUUFBTCxDQUFjSCxRQUFkO0FBQ0Q7O0FBRURMLEVBQUFBLFlBQVksQ0FBRUMsS0FBRixFQUFTO0FBQ25CQSxJQUFBQSxLQUFLLENBQUNRLGNBQU47QUFDQSxTQUFLakIsS0FBTCxDQUFXa0IsVUFBWCxDQUFzQixLQUFLakIsS0FBM0I7QUFDRDs7QUFFRGtCLEVBQUFBLE1BQU0sR0FBSTtBQUNSLFFBQUlDLEtBQUssR0FBRyxDQUFDLFFBQUQsRUFBVyxTQUFYLEVBQXNCLFlBQXRCLENBQVo7QUFDQSxRQUFJQyxVQUFVLEdBQUcsQ0FBQyxNQUFELEVBQVMsT0FBVCxFQUFrQixNQUFsQixDQUFqQjtBQUNBLFFBQUlDLEtBQUssR0FBRyxDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLFVBQWpCLENBQVo7QUFDQSxRQUFJckIsS0FBSyxHQUFHLEtBQUtBLEtBQWpCO0FBQ0Esd0JBRVE7QUFBTSxNQUFBLFFBQVEsRUFBRSxLQUFLTztBQUFyQixvQkFDQSx5Q0FEQSxFQUVHWSxLQUFLLENBQUNHLEdBQU4sQ0FBVSxDQUFDQyxLQUFELEVBQVFDLEtBQVIsa0JBQ1gsb0JBQUMsU0FBRDtBQUFXLE1BQUEsSUFBSSxFQUFFSixVQUFVLENBQUNJLEtBQUQsQ0FBM0I7QUFDQSxNQUFBLEtBQUssRUFBRSxLQUFLeEIsS0FBTCxDQUFXb0IsVUFBVSxDQUFDSSxLQUFELENBQXJCLENBRFA7QUFFQSxNQUFBLFNBQVMsRUFBRUgsS0FBSyxDQUFDRyxLQUFELENBRmhCO0FBR0EsTUFBQSxLQUFLLEVBQUVMLEtBQUssQ0FBQ0ssS0FBRCxDQUhaO0FBSUEsTUFBQSxNQUFNLEVBQUUsS0FBS25CLFdBSmI7QUFLQSxNQUFBLEdBQUcsRUFBRW1CO0FBTEwsTUFEQyxDQUZILGVBV0UsMkNBWEYsQ0FGUjtBQWdCRDs7QUFoRGlDOztBQW1EcEMsZUFBZTdCLEtBQWY7QUFFQTtBQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZXh0SW5wdXQgZnJvbSAnLi90ZXh0aW5wdXQuanMnO1xuXG5jbGFzcyBGb3JtMSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyIChwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgcGFzczogJycsXG4gICAgICBmb3JtTnVtOiAnZm9ybTEnXG4gICAgfVxuICAgIHRoaXMuaGFuZGxlSW5wdXQgPSB0aGlzLmhhbmRsZUlucHV0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlSW5wdXQgKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gdGFyZ2V0Lm5hbWU7XG4gICAgbGV0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSk7XG4gICAgbmV3U3RhdGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gIH1cblxuICBoYW5kbGVTdWJtaXQgKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLmhhbmRsZU5leHQodGhpcy5zdGF0ZSk7XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGxldCBsYWJlbCA9IFsnTmFtZTogJywgJ0VtYWlsOiAnLCAnUGFzc3dvcmQ6ICddO1xuICAgIGxldCBwcm9wZXJ0aWVzID0gWyduYW1lJywgJ2VtYWlsJywgJ3Bhc3MnXTtcbiAgICBsZXQgdHlwZXMgPSBbJ3RleHQnLCAndGV4dCcsICdwYXNzd29yZCddO1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgICAgIDxoMT5Gb3JtIDE8L2gxPlxuICAgICAgICAgICAgICB7bGFiZWwubWFwKChpbnB1dCwgaW5kZXgpID0+XG4gICAgICAgICAgICAgIDxUZXh0SW5wdXQgbmFtZT17cHJvcGVydGllc1tpbmRleF19XG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlW3Byb3BlcnRpZXNbaW5kZXhdXX1cbiAgICAgICAgICAgICAgaW5wdXRUeXBlPXt0eXBlc1tpbmRleF19XG4gICAgICAgICAgICAgIGxhYmVsPXtsYWJlbFtpbmRleF19XG4gICAgICAgICAgICAgIGNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH1cbiAgICAgICAgICAgICAga2V5PXtpbmRleH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPGJ1dHRvbj5OZXh0PC9idXR0b24+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm0xO1xuXG57LyogPFRleHRJbnB1dCBuYW1lPXtwcm9wZXJ0aWVzWzBdfVxudmFsdWU9e3RoaXMuc3RhdGVbcHJvcGVydGllc1swXV19XG5pbnB1dFR5cGU9e3R5cGVzWzBdfVxubGFiZWw9e2lucHV0c1swXX1cbmNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH1cbi8+XG48YnIvPlxuPFRleHRJbnB1dCBuYW1lPXtwcm9wZXJ0aWVzWzFdfVxudmFsdWU9e3RoaXMuc3RhdGVbcHJvcGVydGllc1sxXV19XG5pbnB1dFR5cGU9e3R5cGVzWzFdfVxubGFiZWw9e2lucHV0c1sxXX1cbmNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH1cbi8+XG48YnIvPlxuPFRleHRJbnB1dCBuYW1lPXtwcm9wZXJ0aWVzWzJdfVxudmFsdWU9e3RoaXMuc3RhdGVbcHJvcGVydGllc1syXV19XG5pbnB1dFR5cGU9e3R5cGVzWzJdfVxubGFiZWw9e2lucHV0c1syXX1cbmNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dH1cbi8+ICovfSJdfQ==